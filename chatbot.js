// Simple Q&A responses based on website content
const responses = {
    "ูุฑุญุจุง": "ูุฑุญุจุงู! ุฃูุง ุงููุณุงุนุฏ ุงูุดุฎุตู ููููุน ูุญูุฏ ุฅุจุฑุงููู. ููู ูููููู ูุณุงุนุฏุชู ุงููููุ",
    "ูู ุงูุช": "ุฃูุง ุงููุณุงุนุฏ ุงูุดุฎุตู ููููุน ูุญูุฏ ุฅุจุฑุงููู. ูููููู ุงูุฅุฌุงุจุฉ ุนูู ุฃุณุฆูุชู ุญูู ููุงุฑุงุชูุ ูุดุงุฑูุนูุ ูุฎุจุฑุงุชู.",
    "ูุงุฐุง ููููู ุงู ุชูุนู": "ูููููู ุงูุฅุฌุงุจุฉ ุนูู ุฃุณุฆูุชู ุญูู:\n- ุงูููุงุฑุงุช ุงูุชูููุฉ ูุงููุบุงุช ุงูุจุฑูุฌูุฉ\n- ุงููุดุงุฑูุน ุงูุณุงุจูุฉ\n- ุงูุดูุงุฏุงุช ูุงูุฏูุฑุงุช ุงูุชุฏุฑูุจูุฉ\n- ุงูุฎุจุฑุงุช ูุงููุคููุงุช\n- ููููุฉ ุงูุชูุงุตู ูุน ูุญูุฏ",
    "ูุง ูู ููุงุฑุงุชู": "ูุญูุฏ ูุฏูู ููุงุฑุงุช ูุชุนุฏุฏุฉ:\n- ุจุฑูุฌุฉ Python ูุนููู ุงูุจูุงูุงุช\n- ุชุทููุฑ ุงูููุจ Front-End\n- RPA ูุงูุฃุชูุชุฉ\n- ุฅุฏุงุฑุฉ ููุงุนุฏ ุงูุจูุงูุงุช MySQL\n- ุฃูุธูุฉ ุงูุชุดุบูู Linux ู Windows\n- ุงูุดุจูุงุช ูุงูุฃูู ุงูุณูุจุฑุงูู",
    "ูุง ูู ูุดุงุฑูุนู": "ูุญูุฏ ูุฏูู ุนุฏุฉ ูุดุงุฑูุน ูููุฉ:\n1. ูุธุงู ุงูุญุถูุฑ ุจุงุณุชุฎุฏุงู RFID\n2. ูุธุงู ุฅุฏุงุฑุฉ ุงูุทูุงุจ\n3. ูุธุงู ุฃุชูุชุฉ ุจุงุณุชุฎุฏุงู RPA\n4. ุชุทุจูู ููุจ ูุฅุนุงุฏุฉ ุงูุชุฏููุฑ",
    "ูุง ูู ุดูุงุฏุงุชู": "ูุฏูู ุงูุนุฏูุฏ ูู ุงูุดูุงุฏุงุช:\n- ุดูุงุฏุฉ Machine Learning ูู ููุฆุฉ ุงููุถุงุก ุงููุตุฑูุฉ\n- ุดูุงุฏุฉ ุชุญููู ุงูุฃุนูุงู\n- ุดูุงุฏุฉ SQL ูู ููุงุฑุฉ ุชู\n- ุดูุงุฏุฉ Python ูู ููุงุฑุฉ ุชู\n- ุดูุงุฏุฉ ุชุทููุฑ ุงูููุจ ูู ููุงุฑุฉ ุชู\n- ุดูุงุฏุฉ ุฃุฏูุงุช ุงูุชุญููู",
    "ููู ุงุชูุงุตู ูุนู": "ููููู ุงูุชูุงุตู ูุน ูุญูุฏ ุนุจุฑ:\n- ุงูุจุฑูุฏ ุงูุฅููุชุฑููู: Mhmdg7480@gmail.com\n- ุฑูู ุงููุงุชู: +2001063697784\n- ููููุฏ ุฅู: linkedin.com/in/mohamed-ibrahim\n- ุฌูุช ูุจ: github.com/banhamedo",
    "ูุง ูู ูุบุงุชู": "ูุญูุฏ ูุชุญุฏุซ:\n- ุงูุนุฑุจูุฉ: ุงููุบุฉ ุงูุฃู\n- ุงูุฅูุฌููุฒูุฉ: ูุณุชูู ูุชูุณุท",
    "ูุง ูู ุฎุจุฑุงุชู": "ูุญูุฏ ุทุงูุจ ูู ุงูุณูุฉ ุงูุซุงูุซุฉ ูู ุนููู ุงูุจูุงูุงุช ุจุฌุงูุนุฉ ุญููุงู ุงูุฏูููุฉ ููุชูููููุฌูุงุ ูุน ุฎุจุฑุฉ ูู:\n- ุชุทููุฑ ุงูููุจ\n- ุชุญููู ุงูุจูุงูุงุช\n- ุฃุชูุชุฉ ุงูุนูููุงุช\n- ุญููู ุงูุจุฑูุฌูุงุช",
    "ูุง ูู ุฎุฏูุงุชู": "ููุฏู ูุญูุฏ ุฎุฏูุงุช:\n1. ุชุญููู ุงูุจูุงูุงุช\n2. ุชุทููุฑ RPA\n3. ุชุทููุฑ ุงูููุจ",
    "default": "ุนุฐุฑุงูุ ูู ุฃููู ุณุคุงูู. ๐\n\nููููู ุงุฎุชูุงุฑ ุฃุญุฏ ุงูุฃุณุฆูุฉ ุงูุชุงููุฉ:\n\n๐ ุงูููุงุฑุงุช ูุงูุดูุงุฏุงุช:\nโข ูุง ูู ููุงุฑุงุชูุ\nโข ูุง ูู ุดูุงุฏุงุชูุ\n\n๐ผ ุงูุฎุจุฑุงุช ูุงููุดุงุฑูุน:\nโข ูุง ูู ุฎุจุฑุงุชูุ\nโข ูุง ูู ูุดุงุฑูุนูุ\n\n๐ ุงูุชูุงุตู ูุงูุฎุฏูุงุช:\nโข ููู ุงุชูุงุตู ูุนูุ\nโข ูุง ูู ูุบุงุชูุ\nโข ูุง ูู ุฎุฏูุงุชูุ\n\nุฃู ููููู ุฅุนุงุฏุฉ ุตูุงุบุฉ ุณุคุงูู ุจุทุฑููุฉ ุฃุฎุฑู. ๐ค"
};

// Suggested questions
const suggestedQuestions = [
    "ูุง ูู ููุงุฑุงุชูุ",
    "ูุง ูู ูุดุงุฑูุนูุ",
    "ููู ุงุชูุงุตู ูุนูุ",
    "ูุง ูู ุดูุงุฏุงุชูุ",
    "ูุง ูู ุฎุจุฑุงุชูุ",
    "ูุง ูู ูุบุงุชูุ",
    "ูุง ูู ุฎุฏูุงุชูุ"
];

// Chat widget HTML
const chatWidget = `
<div class="chat-widget">
    <div class="chat-button" id="chatButton">
        <i class="fas fa-comments"></i>
    </div>
    <div class="chat-window" id="chatWindow">
        <div class="chat-header">
            <span>ุงููุณุงุนุฏ ุงูุดุฎุตู</span>
            <button id="closeChat"><i class="fas fa-times"></i></button>
        </div>
        <div class="chat-messages" id="chatMessages">
            <div class="message bot-message">ูุฑุญุจุงู! ุฃูุง ุงููุณุงุนุฏ ุงูุดุฎุตู ููููุน ูุญูุฏ ุฅุจุฑุงููู. ููู ูููููู ูุณุงุนุฏุชู ุงููููุ</div>
            <div class="suggested-questions">
                <p class="text-sm text-gray-500 mb-2">ููููู ุงุฎุชูุงุฑ ุฃุญุฏ ูุฐู ุงูุฃุณุฆูุฉ:</p>
                <div class="flex flex-wrap gap-2" id="suggestedQuestionsContainer"></div>
            </div>
        </div>
        <div class="chat-input">
            <input type="text" id="userInput" placeholder="ุงูุชุจ ุณุคุงูู ููุง...">
            <button id="sendMessage">ุฅุฑุณุงู</button>
        </div>
    </div>
</div>
`;

// Add chat widget to the page
document.body.insertAdjacentHTML('beforeend', chatWidget);

// Get DOM elements
const chatButton = document.getElementById('chatButton');
const chatWindow = document.getElementById('chatWindow');
const closeChat = document.getElementById('closeChat');
const userInput = document.getElementById('userInput');
const sendMessage = document.getElementById('sendMessage');
const chatMessages = document.getElementById('chatMessages');
const suggestedQuestionsContainer = document.getElementById('suggestedQuestionsContainer');

// Add suggested questions
function addSuggestedQuestions() {
    // Clear previous questions
    suggestedQuestionsContainer.innerHTML = '';
    
    // Add new questions
    suggestedQuestions.forEach(question => {
        const button = document.createElement('button');
        button.className = 'suggested-question';
        button.textContent = question;
        button.addEventListener('click', () => {
            userInput.value = question;
            sendUserMessage();
        });
        suggestedQuestionsContainer.appendChild(button);
    });
}

// Toggle chat window
chatButton.addEventListener('click', () => {
    chatWindow.classList.toggle('active');
    if (chatWindow.classList.contains('active')) {
        addSuggestedQuestions();
    }
});

closeChat.addEventListener('click', () => {
    chatWindow.classList.remove('active');
});

// Send message function
function sendUserMessage() {
    const message = userInput.value.trim();
    if (message) {
        // Add user message
        addMessage(message, 'user-message');
        
        // Get bot response
        const response = getBotResponse(message);
        
        // Add bot response after a short delay
        setTimeout(() => {
            addMessage(response, 'bot-message');
            // Add suggested questions after bot response
            addSuggestedQuestions();
        }, 500);
        
        // Clear input
        userInput.value = '';
    }
}

// Add message to chat
function addMessage(text, className) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${className}`;
    messageDiv.textContent = text;
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

// Get bot response
function getBotResponse(message) {
    // Normalize the message by removing question marks and extra spaces
    const normalizedMessage = message.toLowerCase().replace(/[ุ?]/g, '').trim();
    
    // Find the matching response
    for (const [key, value] of Object.entries(responses)) {
        const normalizedKey = key.toLowerCase().replace(/[ุ?]/g, '').trim();
        if (normalizedMessage === normalizedKey) {
            return value;
        }
    }
    
    return responses.default;
}

// Event listeners for sending messages
sendMessage.addEventListener('click', sendUserMessage);
userInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        sendUserMessage();
    }
}); 